/*
 *   Copyright (c) 2022
 *   All rights reserved.
 */
use tonic::{transport::Server, Request, Response, Status};
use upf::serialize::Deserialize;
use upf::upf::{Upf, UpfServer};

#[derive(Default)]
pub struct UpfService {
    pub deserialize: Deserialize,
}

#[tonic::async_trait]
impl convert for UpfService {
    async fn convert(&self, request: Request<Upf>) -> Result<Response<Upf>, Status> {
        let mut response = Response::new(Upf::new());
        let upf = request.into_inner();
        let mut deserialize = self.deserialize.clone();
        deserialize.problem = upf.problem;
        deserialize.answer = upf.answer;
        response.set_message(deserialize);
        Ok(response)
    }
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // defining address for our service
    let addr = "[::1]:50051".parse().unwrap();
    // creating a service
    let Upf = UpfService::default();
    println!("Server listening on {}", addr);
    // adding our service to our server.
    Server::builder().add_service(UpfServer::new(Upf)).serve(addr).await?;
    Ok(())
}
